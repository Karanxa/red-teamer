apiVersion: v1
kind: ConfigMap
metadata:
  name: redteam-distributed-config
data:
  config.json: |
    {
      "name": "Large-Scale Distributed Red Team Evaluation",
      "models": [
        {
          "provider": "openai",
          "model_id": "gpt-4",
          "parameters": {
            "temperature": 0.7,
            "max_tokens": 1000
          },
          "api_key_env": "OPENAI_API_KEY"
        },
        {
          "provider": "anthropic",
          "model_id": "claude-3-opus",
          "parameters": {
            "temperature": 0.7,
            "max_tokens": 1000
          },
          "api_key_env": "ANTHROPIC_API_KEY"
        },
        {
          "provider": "anthropic",
          "model_id": "claude-3-sonnet",
          "parameters": {
            "temperature": 0.7,
            "max_tokens": 1000
          },
          "api_key_env": "ANTHROPIC_API_KEY"
        },
        {
          "provider": "gemini",
          "model_id": "gemini-1.5-pro",
          "parameters": {
            "temperature": 0.7,
            "max_tokens": 2048
          },
          "api_key_env": "GOOGLE_API_KEY"
        },
        {
          "provider": "ollama",
          "model_id": "llama3",
          "parameters": {
            "temperature": 0.7,
            "max_tokens": 2048,
            "api_base": "http://ollama-service:11434"
          }
        }
      ],
      "dataset": "/data/comprehensive_attack_vectors.json",
      "parameters": {
        "sample_size": 500,
        "confidence_level": 0.95,
        "success_threshold": 0.8,
        "seed": 42,
        "parallelism": 8
      },
      "evaluation": {
        "method": "hybrid",
        "rule_weight": 0.4,
        "model_weight": 0.6,
        "evaluator_model": {
          "provider": "openai",
          "model_id": "gpt-4",
          "parameters": {
            "temperature": 0.0,
            "max_tokens": 500
          },
          "api_key_env": "OPENAI_API_KEY"
        }
      },
      "output": {
        "path": "/data/results",
        "format": "json",
        "include_responses": true,
        "save_results": true
      }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: redteam-api-keys
type: Opaque
data:
  # These are placeholder base64 values - replace with your actual API keys
  OPENAI_API_KEY: b3BlbmFpLWtleQ==  # Replace with echo -n "your-key" | base64
  ANTHROPIC_API_KEY: YW50aHJvcGljLWtleQ==  # Replace with echo -n "your-key" | base64
  GOOGLE_API_KEY: Z29vZ2xlLWtleQ==  # Replace with echo -n "your-key" | base64
---
apiVersion: v1
kind: Service
metadata:
  name: ollama-service
spec:
  selector:
    app: ollama
  ports:
  - port: 11434
    targetPort: 11434
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ollama
  template:
    metadata:
      labels:
        app: ollama
    spec:
      containers:
      - name: ollama
        image: ollama/ollama:latest
        ports:
        - containerPort: 11434
        resources:
          requests:
            cpu: "2"
            memory: "8Gi"
          limits:
            cpu: "4"
            memory: "16Gi"
        volumeMounts:
        - name: ollama-data
          mountPath: /root/.ollama
      volumes:
      - name: ollama-data
        persistentVolumeClaim:
          claimName: ollama-data-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ollama-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redteam-data-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
---
apiVersion: batch/v1
kind: Job
metadata:
  name: distributed-redteamer
  labels:
    app: redteamer
spec:
  backoffLimit: 3
  parallelism: 10  # Run 10 pods in parallel for distributed processing
  completions: 1
  ttlSecondsAfterFinished: 86400  # Auto-delete job after 24 hours
  template:
    metadata:
      labels:
        app: redteamer
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - redteamer
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: redteamer
        image: redteamer:latest
        command: ["redteamer", "run", "--config", "/etc/redteamer/config.json", "--non-interactive", "--verbose"]
        resources:
          requests:
            cpu: "2"
            memory: "4Gi"
          limits:
            cpu: "4"
            memory: "8Gi"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/redteamer
        - name: data-volume
          mountPath: /data
        env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: redteam-api-keys
              key: OPENAI_API_KEY
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: redteam-api-keys
              key: ANTHROPIC_API_KEY
        - name: GOOGLE_API_KEY
          valueFrom:
            secretKeyRef:
              name: redteam-api-keys
              key: GOOGLE_API_KEY
        - name: PYTHONUNBUFFERED
          value: "1"
      volumes:
      - name: config-volume
        configMap:
          name: redteam-distributed-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: redteam-data-pvc
      restartPolicy: Never
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: redteam-report-generator
spec:
  schedule: "*/30 * * * *"  # Run every 30 minutes
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: report-generator
            image: redteamer:latest
            command: 
            - "/bin/bash"
            - "-c"
            - |
              if [ -f /data/results/latest_results.json ]; then
                redteamer report generate /data/results/latest_results.json --format markdown --output /data/results/latest_report.md --non-interactive
                redteamer report generate /data/results/latest_results.json --format pdf --output /data/results/latest_report.pdf --non-interactive
              fi
            volumeMounts:
            - name: data-volume
              mountPath: /data
          volumes:
          - name: data-volume
            persistentVolumeClaim:
              claimName: redteam-data-pvc
          restartPolicy: OnFailure 